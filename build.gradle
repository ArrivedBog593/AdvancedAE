plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.17'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neoforge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    mods {
        ae2netanalyser {
            sourceSet sourceSets.main
        }
    }

    runs {
        client {
            client()
        }

        server {
            server()
            programArgument '--nogui'
        }

        gametestWorld {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }
    maven {
        name 'cursemaven'
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modmaven"
        url = uri("https://modmaven.dev/")
        content {
            includeGroup("appeng")
            includeGroup("de.mari_023")
        }
    }
    maven {
        url "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
}

dependencies {
    implementation "curse.maven:glodium-957920:5614731"
    implementation "curse.maven:applied-energistics-2-223794:5610903"
    implementation "curse.maven:ex-pattern-provider-892005:5617630"
    jarJar(implementation "de.mari_023:ae2wtlib_api:19.1.0-alpha.1")
    compileOnly "curse.maven:emi-580555:5619579"
    compileOnly "curse.maven:applied-flux-965012:5614830"
    compileOnly "curse.maven:jade-324717:5427817"
    compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:16.0.729"
    // runtime test
    runtimeOnly "curse.maven:applied-flux-965012:5614830"
    runtimeOnly "de.mari_023:ae2wtlib:19.1.0-alpha.1"
    runtimeOnly "curse.maven:jade-324717:5427817"
    // setup Xei
    switch (use_Xei) {
        case "emi":
            runtimeOnly "dev.emi:emi-neoforge:1.1.10+1.21"
            break
        case "rei":
            runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:16.0.729"
            runtimeOnly "dev.architectury:architectury-neoforge:13.0.1"
            runtimeOnly "curse.maven:cloth-config-348521:5424576"
            break
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neoforge_version, neo_version_range: neoforge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
